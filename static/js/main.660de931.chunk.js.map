{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","services/PostComments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","services/users.ts","services/userPosts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","onClick","className","map","post","id","title","type","classNames","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postComments","setPostComments","setErrorMessage","selectedPostId","useState","name","setName","hasNameError","setHasNameError","email","setEmail","hasEmailError","setHasEmailError","text","setText","hasTextError","setHasTextError","isLoading","setIsLoading","addComment","postId","commentName","commentEmail","createComment","newComment","catch","finally","onSubmit","event","preventDefault","trim","length","htmlFor","placeholder","value","onChange","target","PostDetails","errorMessage","isShowComButton","setIsShowComButton","useEffect","state","handleDelete","commentId","currentComments","filter","com","deleteComment","error","comment","href","UserSelector","users","selectedUser","setSelectedUser","dropdownIsActive","setDropdownIsActive","dropdownRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleUserSelect","App","setUsers","userPosts","setUserPosts","setSelectedPost","userId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.660de931.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[],\n  selectedPost: Post | null,\n  onClick: (post: Post) => void,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onClick,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames('button is-link', {\n                  'is-light': selectedPost?.id !== post.id,\n                })}\n                onClick={() => onClick(post)}\n              >\n                {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { createComment } from '../services/PostComments';\n\ninterface Props {\n  postComments: Comment[],\n  setPostComments: (comment: Comment[]) => void,\n  setErrorMessage: (str: string) => void,\n  selectedPostId: number,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postComments,\n  setPostComments,\n  setErrorMessage,\n  selectedPostId,\n}) => {\n  const [name, setName] = useState('');\n  const [hasNameError, setHasNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [text, setText] = useState('');\n  const [hasTextError, setHasTextError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n    setHasNameError(false);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n    setHasEmailError(false);\n  };\n\n  const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(event.target.value);\n    setHasTextError(false);\n  };\n\n  function addComment({\n    postId,\n    name: commentName,\n    email: commentEmail,\n    body,\n  }: Comment) {\n    setErrorMessage('');\n    setIsLoading(true);\n\n    createComment({\n      postId,\n      name: commentName,\n      email: commentEmail,\n      body,\n    })\n      .then(newComment => {\n        setPostComments([...postComments, newComment]);\n      })\n      .catch(() => {\n        setErrorMessage('Something went wrong!');\n        setText('');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setHasNameError(!name.trim());\n    setHasEmailError(!email.trim());\n    setHasTextError(!text.trim());\n\n    if (!name.trim() || !email.trim() || !text.trim()) {\n      return;\n    }\n\n    addComment({\n      id: postComments.length,\n      postId: selectedPostId,\n      name,\n      email,\n      body: text,\n    });\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setText('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': hasNameError })}\n            value={name}\n            onChange={handleNameChange}\n          />\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': hasEmailError })}\n            value={email}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': hasEmailError })}\n            value={text}\n            onChange={handleTextChange}\n          />\n        </div>\n\n        {hasTextError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.get<number>(`/comments/${commentId}`);\n};\n\nexport const createComment\n= ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../services/PostComments';\n\ninterface Props {\n  selectedPost: Post | null,\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isShowComButton, setIsShowComButton] = useState(true);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoading(true);\n\n      getComments(selectedPost.id)\n        .then(setPostComments)\n        .catch(() => {\n          setErrorMessage('Something went wrong');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n\n    setIsShowComButton((state) => {\n      if (!state) {\n        return (true);\n      }\n\n      return state;\n    });\n  }, [selectedPost]);\n\n  const handleDelete = (commentId: number) => {\n    setPostComments(currentComments => currentComments\n      .filter(com => com.id !== commentId));\n    deleteComment(commentId)\n      .catch((error) => {\n        setPostComments(postComments);\n        setErrorMessage('Unable to delete a comment');\n        throw error;\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {!isLoading && errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {errorMessage}\n            </div>\n          )}\n\n          {!isLoading && !errorMessage && !postComments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && postComments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {postComments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${comment.email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n\n              ))}\n\n            </>\n          )}\n\n          {!isLoading && isShowComButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsShowComButton(!isShowComButton)}\n            >\n              Write a comment\n            </button>\n\n          )}\n        </div>\n        {selectedPost && !isLoading && !isShowComButton && (\n          <NewCommentForm\n            postComments={postComments}\n            setPostComments={setPostComments}\n            setErrorMessage={setErrorMessage}\n            selectedPostId={selectedPost.id}\n          />\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User | null) => void,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [dropdownIsActive, setDropdownIsActive] = useState(false);\n\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedUser(user);\n    setDropdownIsActive(false);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      setDropdownIsActive(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={dropdownRef}\n      className={classNames('dropdown', { 'is-active': dropdownIsActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownIsActive(!dropdownIsActive)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href=\"#user-2\"\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => handleUserSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './services/users';\nimport { getUserPosts } from './services/userPosts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n\n      getUserPosts(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  const handleClickButton = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n                {!isLoading && errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {!isLoading && userPosts.length > 0 && (\n                  <PostsList\n                    posts={userPosts}\n                    selectedPost={selectedPost}\n                    onClick={handleClickButton}\n                  />\n                )}\n\n                {!isLoading && !errorMessage && !userPosts.length && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                selectedPost={selectedPost}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}